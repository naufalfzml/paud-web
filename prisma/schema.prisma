// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum StatusPendaftaran {
  MENUNGGU
  DITERIMA
  DITOLAK
}

model User {
  id                      String                    @id @default(uuid())
  email                   String                    @unique
  name                    String
  password                String
  role                    Role                      @default(USER)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  KritikSaran             KritikSaran[]
  PendaftarPesertaDidik   PendaftarPesertaDidik[]
  PendaftarTenagaPendidik PendaftarTenagaPendidik[]
}

model ArtikelBerita {
  id          String   @id @default(uuid())
  judul       String
  content     String
  imageUrl    String
  isPublished Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model KritikSaran {
  id        String   @id @default(uuid())
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Laporan {
  id        String   @id @default(uuid())
  judul     String
  content   String
  author    String
  createdAt DateTime @default(now())
}

model PendaftarPesertaDidik {
  id        String   @id @default(uuid())
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  fullName  String
  alamat    String
  ttl       DateTime
  namaWali  String
  noHpWali  String
  createdAt DateTime @default(now())
}

model PendaftarTenagaPendidik {
  id         String            @id @default(uuid())
  userId     String?
  user       User?              @relation(fields: [userId], references: [id])
  fullName   String
  alamat     String
  noHp       String
  email      String            @unique
  pendidikan String
  pengalaman String?
  status     StatusPendaftaran @default(MENUNGGU)
  createdAt  DateTime          @default(now())
}

model PesertaDidik {
  id        String   @id @default(uuid())
  fullName  String
  alamat    String
  ttl       DateTime
  namaWali  String
  noHpWali  String
  masukDari DateTime // tanggal diterima
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TenagaPendidik {
  id        String   @id @default(uuid())
  fullName  String
  alamat    String
  noHp      String
  email     String   @unique
  nip       String?  @unique
  bidang    String?
  masukDari DateTime //tanggal mulai bergabung
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
